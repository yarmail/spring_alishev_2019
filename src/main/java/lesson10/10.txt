Урок 10: Аннотация @Autowired. Внедрение зависимостей (Dependency Injection).

Для того, чтобы не внедрять зависимость вручную,
в ранних конфигах
Теперь в файле, где нужно внедрить зависимость
мы пишем @Autowired
(в нашем случае над конструктором MusicPlayer)
.
    @Autowired
    public MusicPlayer(Music music) {
        this.music = music;
    }
.

Что происходит
Spring сканирует все классы с аннотацией
@Component и создает бины для этих классов

Spring сканирует все созданниые бины и проверяет,
подходит ли хотя бы один подходящий бин, в качестве
зависимости там, где мы указали аннотацию @Autowired

Если находится подходящий бин, он внедряется в качестве
зависимости.
Если не находится ни одного бина - ошибка.
Если несколько бинов подходят - неоднозначность
(будет рассмотрена в следущем уроке)

---

Мы можем внедрять бины по конкретному
классу или интерфейсу

---

@Autowired можно использовать на полях,
сеттерах и конструкторах
Внедрение в приватное поле может происходить,
даж если нет конструктора и сеттера
Делается это с помощью рефлексии
(Java Reflection API)

---

Если мы создадим ситуацию отсутствия нужного
бина и уберем аннотацию @Component
у ClassicalMusic
мы получим ошибку:
... expected at least 1 bean which quantifies as
autowire candidate...

---

Спринг успешно внедряет зависимости
от других зависимостей







