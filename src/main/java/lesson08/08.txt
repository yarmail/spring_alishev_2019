Урок 8: Жизненный цикл бина (Bean Lifecycle).
Init, Destroy и Factory методы

- запускается Spring приложение
- запускается спринг контейнер
    (куда будут помещены бины)
- создается объект бина
- в бин внедряются зависимости (DI)
- вызывается INIT-METHOD
- бин готов к использованию
- вызывается DESTROY-METHOD
- остановка Spring приложения

---

init-method
- метод, который используется при инициализации бина
- как вариант - инициализация ресурсов,
обращение к внешним файлам, запуск БД

destroy-method
- метод который запускается в ходе уничтожения бина
(при завершении приложения)
- как вариант - очищение ресурсов, закрытие потоков
ввода-вывода, закрытие доступа к БД

---

Как это выглядит в коде конфига
<bean
    id="musicBean"
    class="ClassicalMusic">
    init-method="doMyInit"
    destroy-method="doMyDestroy"
</bean>

---

Методы doMyInit() и doMyDestroy()
создаются в классе бина (ClassicalMusic)

---

Особенности этих методов
- модификатор доступа - может быть любой
- тип возвращаемого значения - любой но чаще всего
void - так как нет возможности получить
возвращаемое значение
- название метода может быть любым (в конфиге указывается их
назначение
- аргументы (параметры) - эти методы НЕ ДОЛЖНЫ принимать
на вход какие-то значения
- для бинов со scope "prototype" Spring не вызывает
destroy метод. Spring отдает prototype бины клиенту и
больше о них не заботится (в отличии от Singleton бинов)

(доп. задание - проверить сколько
раз вызывается init-method для prototype)

---

Фабричный метод
Позволяет создавать объекты не напрямую, через new
а с помощью фабричного метода, который уже будет делать new.
Если объекты вашего класса создаются фабричным методом,
то можно определить factory-method, например
<bean
    id="musicBean"
    class="ClassicalMusic"
    factory-method="getClassicalMusic">
</bean>

Далее вносим изменения в ClassicalMusic

Примечание
Независимо от того, что в ClassicalMusic
мы создаем новые объекты,
если в кофиге singleton - то будет
создаваться только один объект, и выдаваться
только один объект

---