Урок 5: Внедрение зависимостей. Dependency Injection (DI). Введение.

Мы решили несколько вопросов но остался вопрос
внедрения зависимости.
Вот как это выглядит в обычном коде
new MusicPlayer(new ClassicalMusic());

---

class UseMusicPlayer {
    public static void main (String[] ars) {
        MusicPlayer musicPlayer = new MusicPlayer(new ClassicalMusic());
    }
}

---

Вот как это выглядит в контексте спринг
new MusicPlayer(music);

        Music music = context.getBean("musicBean", Music.class);
        MusicPlayer musicPlayer = new MusicPlayer(music);

Мы внедряем music вручную и вручную создаем MusicPlayer

---

Этапы работы со Spring
Создаем Java классы - будующие бины
Создаем или связываем бины спомощью Spring
(конфигурация с помощью аннотации, XML или Java код)
При использовании, ВСЕ объекты (бины) беруться из
контейнера Spring

---

Способы внедрения зависимостей
Через конструктор
Через сеттер
Через множество конфигураций
(scope, factory method)
Внедрение через XML, аннотации или Java код
Процесс внедрения можно автоматизовать @Autowiring

На этом уроке мы внедрим зависимость через конструктор
с использованием XML

Вносим изменения в наш конфигурационный файл
lesson05.xml
создаем один бин и даем его в конструктор другому бину,
тем самым упрощая запись и использование
И далее, в тестовом классе упрощаем запись,
используя 1 бин с гоовым коструктором вместо двух